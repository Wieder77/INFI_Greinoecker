import numpy as np


if __name__ == "__main__":
    #1.1
    a1 = np.arange(10)
    print(f"1.1 Erzeugen von einfachen Zahlenfolgen und Zufallszahlen {a1}")
    #[0 1 2 3 4 5 6 7 8 9]
    #1.1.1
    a2 = np.arange(100, 201)
    print(f"1.1.1 Wie koennen auf einfachem Weg die Zahlen von 100 bis 200 erzeugt werden {a2}")
    """[100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
         118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135
         136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153
         154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171
         172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189
         190 191 192 193 194 195 196 197 198 199 200]
    """
    #1.1.2
    a3 = np.arange(0, 201, 2)
    print(f"1.1.2 Wie k¨onnen die Zahlen 100 bis 200 mit Abstand 2 (also 100, 102, 104,..) erzeugt werden {a3}")
    """
         [  0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34
          36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70
          72  74  76  78  80  82  84  86  88  90  92  94  96  98 100 102 104 106
         108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142
         144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178
         180 182 184 186 188 190 192 194 196 198 200]
    """
    #1.1.3
    a4 = np.arange(100, 110.5, 0.5)
    print(f"1.1.3 Wie bekommt man Zahlen zwischen 100 und 110 mit Abstand 0.5, also 100, 100.5, 101,... {a4}")
    """
        [100.  100.5 101.  101.5 102.  102.5 103.  103.5 104.  104.5 105.  105.5
        106.  106.5 107.  107.5 108.  108.5 109.  109.5 110. ]
    """
    #1.1.4
    #Gleichverteilt
    a5 = np.random.randint(1, 101, 100)
    print(f"1.1.4 Erzeuge 100 und 100 Gleichverteilte Zahlen {a5}")
    """
        [65.99954285 87.89457932 80.32250869 91.19425425  5.23021231 49.38191823
         53.33141662 55.28614416 83.32946451 68.0781911  28.08528882 47.58349217
         75.09404243 86.25920523 54.08258342  3.69746356 56.05255555 65.1290595
         65.41834687 81.67980079 24.64032035  7.71754329 85.52150569 42.21486405
         29.76574773 30.17298822 32.52750908  7.22059455 13.18716036 90.46197247
         96.51663693 57.9664064  10.33077865 20.62497819 18.5247643  18.69318139
         59.38572445 44.01429447 12.4468638  24.96603516 54.87967956 95.95825004
         77.3095925  72.33054851 52.42005523 96.85161506 17.57657141 26.96766755
          7.30894218  5.05501336 66.22373635 25.11628663 83.04771991 62.73385122
         97.46715594 17.36142101 52.36788458 25.50376663 84.11572697  3.82110461
         83.28508644 44.54785343 70.80189868 95.17255607 58.3523058  22.25763162
         51.72182436 77.9714732  90.44624741 25.29868695 12.87377946 27.94870157
         74.63012659 78.45513757 87.79980525 28.65311251 80.2146706  74.40509831
         97.02193064 42.87196449 88.4101527  97.34341381 33.00092052 31.12530378
         46.33898644 33.80353073 65.22622954 35.36665678  4.97771566 39.76007828
         85.45206857 82.39145488 19.60083136 81.86864348  9.50105182 21.32690205
         27.06539296 43.41696578 33.86282184 54.09762451]
    """
    #Normalverteilt
    a6 = np.random.normal(0, 1,100)
    print()
    print()
    print(f"1.1.4 Erzeuge 100 und 100 Normalverteilte Zahlen {a6}")
    """
    [-1.60208449  0.68704284 -0.0779085   0.9611514  -0.01883408 -1.34884219
     -0.84910164  0.15649561 -2.96190807  0.17938768  1.40403305  0.2661237
      0.79583529  0.60376158 -0.67558178 -1.11392879 -0.05743755 -0.5520176
      1.12064064  2.63292041 -1.41838189 -0.67097104 -0.03028621 -0.72378945
      0.69540693 -1.08180577  1.64506998 -0.23050238  1.72090968  0.18193242
     -1.35987337 -0.83731746  0.4864159  -0.91519159 -0.0759349   0.15259285
      0.95742151 -0.2506071  -0.30549363 -0.49194927  1.00561028 -0.47911169
      0.52613278  0.40017621 -0.60193101 -0.44953123  0.55387915 -0.54756647
      0.46664994 -0.15284854  1.09275812 -0.67575906  0.37842336  0.57526524
      0.29165871  1.28312775 -0.28966507  0.88939934  0.30823634  0.4243831
     -3.320306    1.53686963 -0.29156825  1.67961997 -1.38473747 -0.27626487
      0.09657151  1.2283414   0.62431409 -0.41561165 -0.42268436 -0.25507843
      0.72747634 -0.44946277 -1.38267482  0.59554726  0.31588249 -0.74810094
     -1.29405192  1.04223266  0.1641258  -0.30471966 -0.13613518  0.57221839
     -0.63043624 -0.66977297 -0.10115979  1.458426    2.64390022  0.47754621
     -0.51808733 -1.55324326 -1.49385532  1.07324246 -0.03385116  0.20518122
     -2.27924528  0.3423685   2.03004999  0.01625316]
    """
    #2.1
    #Mittelwert
    a7 = np.mean(a6)
    print(f"2.1 Mittelwert {a7}")
    # -0.025037922328710622
    #Median
    a8 = np.median(a6)
    print(f"2.1 Median{a8}")
    # -0.019618751469958486
    #Minimum
    a9 = np.min(a6)
    print(f"2.1 Minimum {a9}")
    # -2.475685645215029
    #Maximum
    a10 = np.max(a6)
    print(f"Maximum {a10}")
    # 2.101260381765095
    #Standartabweichung
    a11 = np.std(a6)
    print(f"Standartabweichung {a11}")
    # 0.9143577921707012
    #2.2
    a12 = np.mean(a6)  -np.std(a6) * 2, np.mean(a6) + np.std(a6) *2
    print(f"2.2 In welchem Bereich liegen die mittleren 95%? Welche Werte sind das die außerhalb liegen? {a12}")
    #np.float64(-2.043281414937277), np.float64(2.060597406610052)
    #2.3
    a13 = a6 * 100
    print(f"2.3 Alle Zahlen mit 100 multiplizieren {a13}")
    """
        [ -75.58603794   35.77747606  102.96801561  -75.69619133   51.50588623
      -85.29854003  -26.69392084 -126.44472881  -16.25167717   -7.94204346
       97.19624913 -160.64946654 -152.89355249   45.49594556  -95.58594007
      -31.23260681   89.58042044  133.43220411  123.09397571 -100.79584457
     -199.02174933   93.29016277  137.30714359 -247.56856452  138.68342834
      210.12603818   79.75226541   69.2289076   -49.87328628   78.95500832
       -4.99037612  -79.34293526  -80.00383844   78.07587426   31.24220232
     -206.58098667   16.99572398   44.78728826 -122.25058672  -73.03438927
      -38.06938282   24.0728921  -151.09682817  143.94842458  -55.77643077
       12.14469652   58.52394596   -6.50035627  -35.67680763   62.64770232
        8.67553796  150.16411903  -39.5268419  -166.86283495   13.95603161
      -82.42439266  -79.00632738   69.45796276   47.29983675  -24.08861305
      -31.43772215   57.51652257 -129.68236507   35.94151146    7.20774143
      152.07985744   80.0326475    -2.28740423 -131.16936942   -2.82417096
      100.42503362   30.35189219   50.11774535  -14.4626098    63.73847859
       32.73461292   85.85344802  -42.38294962   75.17426727  -29.76163157
       66.43715172 -121.16088994  140.4132573     6.78931425  -86.04180745
     -145.50616545   -7.06696675  -61.39124501  -53.11603682  -72.02353833
       -1.63634606  -13.81269582   58.34846543   44.84452695  156.3455655
     -146.55814384   -6.94239693   48.96926878   -9.31500936   13.25964582]
    """
    #2.4
    a14 = a6[:10]
    print(f"2.4 Nur die ersten 10 Zahlen auswaehlen {a14}")
    """
    [-0.75586038  0.35777476  1.02968016 -0.75696191  0.51505886 -0.8529854
    -0.26693921 -1.26444729 -0.16251677 -0.07942043]
    """
    #2.5
    a15 = a6[(a6 > 0)]
    print(f"2.5 Nur die Werte auswaehlen, die groeßer 0 sind {a15}")
    """
    [0.35777476 1.02968016 0.51505886 0.97196249 0.45495946 0.8958042
     1.33432204 1.23093976 0.93290163 1.37307144 1.38683428 2.10126038
     0.79752265 0.69228908 0.78955008 0.78075874 0.31242202 0.16995724
     0.44787288 0.24072892 1.43948425 0.12144697 0.58523946 0.62647702
     0.08675538 1.50164119 0.13956032 0.69457963 0.47299837 0.57516523
     0.35941511 0.07207741 1.52079857 0.80032648 1.00425034 0.30351892
     0.50117745 0.63738479 0.32734613 0.85853448 0.75174267 0.66437152
     1.40413257 0.06789314 0.58348465 0.44844527 1.56345565 0.48969269
     0.13259646]
    """